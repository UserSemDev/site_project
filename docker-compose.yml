services:
  auth-service:
    container_name: "auth-service"
    build: ./auth
    tty: true
    restart: always
    env_file:
      - ./auth/.env
    depends_on:
       - mongodb
    expose:
      - "8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth.localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.auth-service.entryPoints=web"
      - "traefik.http.services.auth-service.loadbalancer.server.port=80"
    networks:
      - backend

  mongodb:
    container_name: "mongodb"
    image: mongo:8.0.5
    restart: always
    ports:
      - "27018:27017"
    env_file:
      - ./auth/.env
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  reverse-proxy:
    container_name: "reverse-proxy"
    image: "traefik:v3.3"
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.address=http://auth-service/auth/"
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.authResponseHeaders=Authorization,X-USER-ROLE"
    networks:
      - backend

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entryPoints=web"
      - "traefik.http.routers.whoami.middlewares=auth-service-middleware"
    networks:
      - backend

  postgres-db:
    container_name: "postgres-db"
    image: postgres:latest
    restart: always
    env_file:
      - ./events/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend


  events-service:
    container_name: "events-service"
    build: ./events
    tty: true
    restart: always
    env_file:
      - ./events/.env
    depends_on:
      postgres-db:
        condition: service_started
      auth-service:
        condition: service_started
    expose:
      - "8001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-service.rule=Host(`events.localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.event-service.entryPoints=web"
      - "traefik.http.routers.event-service.middlewares=auth-service-middleware"
      - "traefik.http.services.event-service.loadbalancer.server.port=80"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    container_name: "rabbitmq"
    env_file:
      - ./events/.env
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mongo_data:
  postgres_data:
  rabbitmq_data: