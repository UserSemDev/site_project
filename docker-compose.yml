services:
  auth-service:
    container_name: "auth-service"
    build: ./auth
    tty: true
    restart: always
    env_file:
      - ./auth/.env
    depends_on:
      mongodb:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth.localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.auth-service.entrypoints=web"
      - "traefik.http.services.auth-service.loadbalancer.server.port=80"
    networks:
      - backend

  mongodb:
    container_name: "mongodb"
    image: mongo:8.0.5
    restart: always
    ports:
      - "27018:27017"
    env_file:
      - ./auth/.env
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  nginx:
    container_name: "nginx"
    image: nginx:latest
    restart: always
    volumes:
      - ./backend:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.localhost`)"
      - "traefik.http.routers.nginx.entrypoints=web"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    networks:
      - backend

  reverse-proxy:
    container_name: "reverse-proxy"
    image: "traefik:v3.3"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - auth-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.address=http://auth-service/auth/"
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth-service-middleware.forwardauth.authResponseHeaders=Authorization,X-USER-ROLE"
    networks:
      - backend

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entryPoints=web"
      - "traefik.http.routers.whoami.middlewares=auth-service-middleware"
    networks:
      - backend

networks:
  backend:

volumes:
  mongo_data: